const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const dayjs = require('dayjs');
const isSameOrAfter = require('dayjs/plugin/isSameOrAfter');
dayjs.extend(isSameOrAfter);

function loadLifeEvents() {
  const filePath = path.join(__dirname, 'lifeEvents.yml');
  const fileContents = fs.readFileSync(filePath, 'utf8');
  return yaml.load(fileContents);
}

module.exports = function (data) {
  const lifeEvents = loadLifeEvents();

  // Load timespans separately
  const timespans = lifeEvents.timespans || [];
  // Remove timespans array from main events
  delete lifeEvents.timespans;

  // Inject timespan start as an event
  for (const span of timespans) {
    if (!lifeEvents[span.start]) lifeEvents[span.start] = [];
    lifeEvents[span.start].push({
      title: span.title,
      icon: span.icon,
      category: span.category || '',
      isTimespanStart: true,
      timespan: span,
      hide_from_grid: !!span.hide_from_grid,
    });
  }

  const startDateStr = data.start_date || '1985-02-11';
  const endYear = data.end_year || 2086;

  const startDate = dayjs(startDateStr);
  const endDate = dayjs(`${endYear}-01-01`);
  const today = dayjs();

  // Calculate which week is the current one
  const currentWeekIndex = today.diff(startDate, 'week') + 1;

  // Add birthday items
  for (let year = startDate.year() + 1; year <= endYear; year++) {
    const birthdayDate = startDate.year(year).format('YYYY-MM-DD');
    const age = year - startDate.year();

    if (!lifeEvents[birthdayDate]) lifeEvents[birthdayDate] = [];
    lifeEvents[birthdayDate].push({
      title: `${age} in ${year}`,
      icon: 'ðŸŽ‚',
      category: 'birthday',
      autoGenerated: true,
    });
  }

  // Create an array of weeks between start and end date
  const weeks = [];
  let weekStartDate = startDate;
  let i = 1;
  while (weekStartDate.isBefore(endDate)) {
    weeks.push({
      date: weekStartDate.format('YYYY-MM-DD'),
      weekStart: weekStartDate.format('YYYY-MM-DD'),
      weekEnd: weekStartDate.add(1, 'week').format('YYYY-MM-DD'),
      index: i,
      events: [],
      isPast: i <= currentWeekIndex,
    });
    weekStartDate = weekStartDate.add(1, 'week');
    i++;
  }

  // Preprocess events into an array with parsed dates
  const allEvents = [];
  for (const [dateStr, eventsArr] of Object.entries(lifeEvents)) {
    const parsedDate = dayjs(dateStr);
    if (!parsedDate.isValid()) {
      console.warn(`Invalid date: ${dateStr}`);
      continue;
    }
    for (const event of eventsArr) {
      allEvents.push({
        ...event,
        date: dateStr,
        dateObj: parsedDate,
      });
    }
  }

  // For each week, find events and timespans that fall within that week
  for (const week of weeks) {
    const weekStart = dayjs(week.weekStart);
    const weekEnd = dayjs(week.weekEnd);

    // Assign events to weeks
    week.events = allEvents.filter(
      (event) =>
        event.dateObj.isSameOrAfter(weekStart) &&
        event.dateObj.isBefore(weekEnd)
    );

    // Assign timespan items to weeks
    week.timespans = timespans.filter((span) => {
      const spanStart = dayjs(span.start);
      const spanEnd = span.end ? dayjs(span.end) : dayjs(); // open-ended spans end today

      // If week overlaps with timespan, but is NOT the week containing the start date
      const overlaps =
        weekEnd.isAfter(spanStart) && weekStart.isBefore(spanEnd.add(1, 'day'));
      const isStartWeek =
        spanStart.isSameOrAfter(weekStart) && spanStart.isBefore(weekEnd);
      return overlaps && !isStartWeek;
    });
  }

  return weeks;
};
